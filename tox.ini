[tox]
skipsdist = True
envlist = lint,static,py{38,39,310,311,312,313}-unit,py{38,39,310,311,312,313}-pebble-local,combinecoverage38
labels =
    coverage38 = py38-unit,py38-pebble-local,combinecoverage38
    pebble = py{38,39,310,311,312,313}-pebble-local
    unit = py{38,39,310,311,312,313}-unit

[testenv]
setenv =
    PYTHONPATH = {toxinidir}
    PY_COLORS=1

[testenv:lint]
description = Check code against coding style standards
deps =
    codespell==2.3.0
    ruff==0.7.0
commands_pre =
    # ruff --preview means include 'unstable' rules/fixes
    # '-' prefix is tox syntax to continue even if the command fails
    - ruff check --preview --diff
    - ruff format --preview --diff
commands =
    codespell {toxinidir}/ --toml={toxinidir}/pyproject.toml
    ruff check --preview
    ruff format --preview --check

[testenv:format]
description = Check code against coding style standards
deps =
    ruff==0.7.0
commands =
    # ruff --preview means include 'unstable' rules/fixes
    ruff check --preview --fix
    ruff format --preview

[testenv:static]
description = Run static type checker
deps =
    pyright
    pytest
    -e '.'
commands =
    pyright {posargs}

[testenv:unit]
description = Run unit tests
allowlist_externals =
    rm
deps =
    pytest
    coverage[toml]
    -e '.'
commands =
    coverage run \
        --data-file=.coverage-{env_name} \
        --rcfile=pyproject.toml \
        --source=src \
        -m pytest \
        -vv \
        {posargs:-rA} \
        --tb=native \
        tests/unit
    coverage xml --data-file=.coverage-{env_name} -o .report/coverage-{env_name}.xml
    rm -rf htmlcov-{env_name}
    coverage html --data-file=.coverage-{env_name} --show-contexts --directory=htmlcov-{env_name}
    coverage report --data-file=.coverage-{env_name}

[testenv:py{38,39,310,311,312,313}-unit]
base=unit

[testenv:pebble-{local,ci}]
description = Run real pebble tests
allowlist_externals =
    bash
    mkdir
    rm
    sleep
setenv =
    PEBBLE=/tmp/pebble-test
    RUN_REAL_PEBBLE_TESTS=1
deps =
    pytest
    coverage[toml]
    -e '.'
commands_pre =
    mkdir --parents /tmp/pebble-test  # parents also means it's ok if it exists
    # run pebble in background and write its pid to a file
    local: bash -c "pebble run --create-dirs &>/dev/null & echo -n $! > /tmp/pebble-test/pebble.pid"
    local: sleep 1
commands =
    coverage run \
        --data-file=.coverage-{env_name} \
        --rcfile=pyproject.toml \
        --source=src \
        -m pytest \
        -vv \
        {posargs:-rA} \
        --tb=native \
        tests/pebble
    coverage xml --data-file=.coverage-{env_name} -o .report/coverage-{env_name}.xml
    rm -rf htmlcov-{env_name}  # coverage doesn't overwrite explicitly passed --directory
    coverage html --data-file=.coverage-{env_name} --show-contexts --directory=htmlcov-{env_name}
    coverage report --data-file=.coverage-{env_name}
commands_post =
    local: sleep 1
    local: bash -c "kill $(</tmp/pebble-test/pebble.pid)"  # kill the pebble that we started

[testenv:py{38,39,310,311,312,313}-pebble-local]
base=pebble-local

[testenv:combinecoverage38]  # no hyphens/underscores in name so parts aren't treated as factors
description = Combine py38-unit and py38-pebble coverage reports
deps =
    coverage[toml]
commands =
    coverage combine --keep .coverage-py38-unit .coverage-py38-pebble-local  # writes to .coverage
    coverage xml -o .report/coverage.xml  # reads from .coverage
    coverage html --show-contexts  # reads from .coverage, writes to htmlcov
