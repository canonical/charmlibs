name: Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_call:

jobs:
  packages:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.packages.outputs.changed }}
      unit: ${{ steps.packages.outputs.unit }}
      pebble: ${{ steps.packages.outputs.pebble }}
      juju: ${{ steps.packages.outputs.juju }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: packages
        run: |
          CHANGES=$(git diff --name-only origin/${{ github.base_ref || 'main' }})
          GLOBAL=$(echo $CHANGES | grep -e ^pyproject.toml -e ^justfile -e ^.github)
          if [[ $GLOBAL ]]; then
            echo 'Changes to repo level config files, running tests for all packages.'
            PACKAGES=$(ls -1 packages/)
          else
            echo 'No changes to repo level config files, running tests for changed packages only.'
            PACKAGES=$(echo $CHANGES | grep ^packages | cut -d'/' -f2 | uniq)
          fi
          if [[ $PACKAGES ]]; then
            UNIT=()
            PEBBLE=()
            JUJU=()
            for package in $PACKAGES; do
              if [[ -d "packages/$package/tests/unit" ]]; then
                UNIT+=("$package")
              fi
              if [[ -d "packages/$package/tests/integration/pebble" ]]; then
                PEBBLE+=("$package")
              fi
              if [[ -d "packages/$package/tests/integration/juju" ]]; then
                JUJU+=("$package")
              fi
            done
            JSON=$(echo $PACKAGES | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')
            echo "changed=$JSON"
            echo "changed=$JSON" >> "$GITHUB_OUTPUT"
            JSON=$(echo ${UNIT[@]} | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')
            echo "unit=$JSON"
            echo "unit=$JSON" >> "$GITHUB_OUTPUT"
            JSON=$(echo ${PEBBLE[@]} | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')
            echo "pebble=$JSON"
            echo "pebble=$JSON" >> "$GITHUB_OUTPUT"
            JSON=$(echo ${JUJU[@]} | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')
            echo "juju=$JSON"
            echo "juju=$JSON" >> "$GITHUB_OUTPUT"
          else
            echo 'No packages changed, tests will be skipped.'
            echo 'changed=[]' >> "$GITHUB_OUTPUT"
            echo 'unit=[]' >> "$GITHUB_OUTPUT"
            echo 'pebble=[]' >> "$GITHUB_OUTPUT"
            echo 'juju=[]' >> "$GITHUB_OUTPUT"
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run linting
        run: uvx --from rust-just just lint

  static:
    needs: packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.changed) }}
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run ${{ matrix.just-recipe }} tests
        run: uvx --from rust-just just package=${{ matrix.package }} python=${{ matrix.python-version }} static

  unit:
    needs: packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.unit) }}
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run unit tests
        run: uvx --from rust-just just package=${{ matrix.package }} python=${{ matrix.python-version }} unit

  pebble:
    needs: packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.pebble) }}
        pebble-version: [
          'v1.1.1',  # Juju 2.9.50 LTS
          # 'v1.7.4',  # Juju 3.4.6
          # 'v1.10.2',  # Juju 3.5.7
          'v1.19.0',  # Juju 3.6.4 LTS
          'master',
        ]
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          # To suppress the "Restore cache failed" error, since there is no go.sum file here.
          cache: false

      - name: Install Pebble
        run: go install github.com/canonical/pebble/cmd/pebble@${{ matrix.pebble-version }}

      - name: Start Pebble
        run: |
          umask 0
          $HOME/go/bin/pebble run --create-dirs &
        env:
          PEBBLE: /tmp/pebble-test

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run Pebble integration tests
        run: uvx --from rust-just just package=${{ matrix.package }} python=${{ matrix.python-version }} pebble
        env:
          PEBBLE: /tmp/pebble-test

  juju:
    needs: packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.juju) }}
        python-version: [
          '3.8',  # oldest supported by Ops
          '3.12',  # latest Ubuntu LTS
          '3.13',  # latest Python release
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run Juju integration tests
        run: uvx --from rust-just just package=${{ matrix.package }} python=${{ matrix.python-version }} juju
