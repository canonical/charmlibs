name: Tests
# runs tests for specified package
# always runs static tests
# runs unit and integration tests if the package implements them

on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string
      skip-juju:
        description: Skip Juju integration tests.
        # no default will be null, which is falsey -- if we set a default it will be coerced to a string
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      package:
        required: true
        type: string
      skip-juju:
        description: Skip Juju integration tests.
        # no default will be null, which is falsey -- if we set a default it will be coerced to a string
        required: false
        type: boolean

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.tests.outputs.tests }}
      py-versions: ${{ steps.py-versions.outputs.versions }}
    steps:
      - name: Debug
        env:
          PACKAGE: ${{ inputs.package }}
          SKIP: ${{ inputs.skip-juju }}
        run: |
          echo "$PACKAGE"
          echo "$SKIP"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Check which Python versions this package supports
        id: py-versions
        run: uv run --no-project --script .github/get-supported-python-versions.py ${{ inputs.package }}

      - name: Check which test suites this package has
        id: tests
        run: |
          tests=()
          if [ -d ${{ inputs.package }}/tests/unit ]; then
            tests+=('unit')
          fi
          if [ -d ${{ inputs.package }}/tests/integration/pebble ]; then
            tests+=('pebble')
          fi
          if [ -d ${{ inputs.package }}/tests/integration/juju ]; then
            tests+=('juju')
          fi
          js=$(jq '$ARGS.positional' --null-input --compact-output --args "${tests[@]}")
          echo "tests=$js"
          echo "tests=$js" >> "$GITHUB_OUTPUT"

  lint:
    needs: init
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.init.outputs.py-versions).lint }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Run static analysis and other checks
        run: uvx --from rust-just just python=${{ matrix.python-version }} lint ${{ inputs.package }}

  unit:
    needs: init
    if: contains(fromJson(needs.init.outputs.tests), 'unit')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.init.outputs.py-versions).unit }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Run unit tests
        run: uvx --from rust-just just python=${{ matrix.python-version }} unit ${{ inputs.package }}

  pebble:
    needs: init
    if: contains(fromJson(needs.init.outputs.tests), 'pebble')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pebble-version: [
          'v1.1.1',  # Juju 2.9.50 LTS
          # 'v1.7.4',  # Juju 3.4.6
          # 'v1.10.2',  # Juju 3.5.7
          # 'v1.19.0',  # Juju 3.6.4 LTS
          'master',
        ]
        python-version: ${{ fromJson(needs.init.outputs.py-versions).pebble }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          # To suppress the "Restore cache failed" error, since there is no go.sum file here.
          cache: false

      - name: Install Pebble
        run: go install github.com/canonical/pebble/cmd/pebble@${{ matrix.pebble-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Run Pebble integration tests
        run: uvx --from rust-just just python=${{ matrix.python-version }} pebble ${{ inputs.package }}

  juju:
    needs: init
    if: contains(fromJson(needs.init.outputs.tests), 'juju') && !inputs.skip-juju
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        base: ['20.04', '24.04']
        substrate: ['k8s', 'vm']
    steps:
      - uses: actions/checkout@v4

      - name: Install concierge
        run: sudo snap install --classic concierge

      - name: Prepare Juju for microk8s
        if: ${{ matrix.substrate == 'k8s' }}
        run: sudo concierge prepare --verbose --juju-channel=3/stable --charmcraft-channel=3.x/stable -p microk8s

      - name: Prepare Juju for machine
        if: ${{ matrix.substrate == 'vm' }}
        run: sudo concierge prepare --verbose --juju-channel=3/stable --charmcraft-channel=3.x/stable -p machine

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Pack charms
        run: uvx --from rust-just just pack-${{ matrix.substrate }} ${{ inputs.package }} ${{ matrix.base }}

      - name: Run Juju integration tests
        run: uvx --from rust-just just juju-${{ matrix.substrate }} ${{ inputs.package }}
